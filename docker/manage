#!/bin/bash
export MSYS_NO_PATHCONV=1
export DOCKERHOST=${APPLICATION_URL:-$(docker run  --rm --net=host codenvy/che-ip)}
set -e

S2I_EXE=s2i
if [ -z $(type -P "$S2I_EXE") ]; then
  echo -e "The ${S2I_EXE} executable is needed and not on your path."
  echo -e "It can be downloaded from here: https://github.com/openshift/source-to-image"
  echo -e "Make sure you place it in a directory on your path."
  exit 1
fi

SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"
export COMPOSE_PROJECT_NAME="permitify"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage () {
  cat <<-EOF

  Usage: $0 [command] [options]

  Commands:

  build - Build the docker images for the project.
          You need to do this first.

  start - Creates the application containers from the built images
          and starts the services based on the docker-compose.yml file.

          To start the services and connect them to a specific TOB API instance,
          inject the url for the API using the tob-url flag.

          Examples:
          
          - Start ALL issuer services
            $0 start all seed=issuer_service_00000000000000000 TOB_INDY_SEED=the_org_book_0000000000000000000
          
          - Start just the default (bc_registries) issuer service
            $0 start seed=issuer_service_00000000000000000 TOB_INDY_SEED=the_org_book_0000000000000000000
          
          - Point the issuer services at a locally running instance of the tob-api
            $0 start seed=issuer_service_00000000000000000 TOB_INDY_SEED=the_org_book_0000000000000000000 THE_ORG_BOOK_API_URL=http://docker.for.win.localhost:56325/api/v1
          
          - Start specific issuer services
            $0 start bc_registries worksafe_bc seed=issuer_service_00000000000000000 TOB_INDY_SEED=the_org_book_0000000000000000000

  stop - Stops the services.  This is a non-destructive process.  The containers
         are not deleted so they will be reused the next time you run start.

  rebuild - Rebuild the docker images.

  rm - Remove project containers and associated volumes.

  registerDids - Register the DIDs for the issuer services.
                 This is intended for development use.

                 Examples:
                 $0 registerDids seed=issuer_service_00000000000000000
                 - This will register DIDs using seeds from issuer_service_00000000000000001 to issuer_service_0000000000000000<issuerServiceCout>
                   with the locally running von-network instance.
EOF
exit 1
}
# -----------------------------------------------------------------------------------------------------------------
# Default Settings:
# -----------------------------------------------------------------------------------------------------------------
ALL_CONTAINERS="\
    bc_registries\
    worksafe_bc\
    ministry_of_finance\
    fraser_valley_health_authority\
    city_of_surrey\
    liquor_control_and_licensing_branch\
    redis \
    onbis\
"
DEFAULT_CONTAINERS="bc_registries"
# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
configureEnvironment () {
  for arg in $@; do
    case "$arg" in
      *=*)
        export ${arg}
        ;;
    esac
  done

  export APPLICATION_URL=${APPLICATION_URL:-http://localhost}
  export THE_ORG_BOOK_API_URL=${THE_ORG_BOOK_API_URL:-http://tob-api:8080/api/v1}
  export THE_ORG_BOOK_APP_URL=${THE_ORG_BOOK_APP_URL:-http://localhost:8080}
  export REDIS_SERVICE_NAME=${REDIS_SERVICE_NAME:-redis}
  
  # Hacky - we trim the length of the string by 1 then
  # append unique numbers to each service in docker-compose.yml.
  # Each service needs a unique wallet seed, but we only want the developer to have to set it once.
  if [ -z "$seed" ]; then
    echo "You must provide a seed parameter. For example: seed=my_seed_000000000000000000000000."
    exit 1
  fi

  if [ ${#seed} -ne 32 ]; then
    echo "The seed parameter must be 32 characters long exactly."
    exit 1
  fi

  if [ -z "$TOB_INDY_SEED" ]; then
    echo "You must provide a TOB_INDY_SEED parameter. For example: seed=my_tob_seed_00000000000000000000."
    exit 1
  fi

  if [ ${#TOB_INDY_SEED} -ne 32 ]; then
    echo "The TOB_INDY_SEED parameter must be 32 characters long exactly."
    exit 1
  fi

  export LEDGER_URL=${LEDGER_URL:-http://$DOCKERHOST:9000}
  export INDY_WALLET_SEED=${seed%?}
  export TOB_INDY_SEED=${TOB_INDY_SEED}

  export RUST_LOG=${RUST_LOG:-debug}
  export DEBUG=${DEBUG}

  export WALLET_USER_ID=${WALLET_USER_ID:-wall-e}
  export WALLET_PASSWORD=${WALLET_PASSWORD:-pass1234}
  export INDY_WALLET_URL=${INDY_WALLET_URL:-http://$DOCKERHOST:6000/api/v1/}
  export INDY_WALLET_TYPE=${wallet}

  if [ "$COMMAND" == "start" ]; then
    if [ -z "$wallet" ]; then
      export INDY_WALLET_TYPE="virtual"
    fi
    
    if [ "${INDY_WALLET_TYPE}" == "remote" ]; then
      # If we're using an enterprise wallet, it's safe to run multi-process.
      # However Premitify does not support it well just yet.
      export WEB_CONCURRENCY=${WEB_CONCURRENCY:-1}
    else
      # If we're using a virtual wallet we can't run multi-process
      export WEB_CONCURRENCY=1
    fi
  fi
}

getStartupParams() {
  CONTAINERS=""
  ARGS=""

  for arg in $@; do
    case "$arg" in
      *=*)
        # Skip it
        ;;
      all)
        CONTAINERS+=" $ALL_CONTAINERS";;
     -*)
        ARGS+=" $arg";;
      *)
        CONTAINERS+=" $arg";;
    esac
  done

  if [ -z "$CONTAINERS" ]; then
    CONTAINERS="$DEFAULT_CONTAINERS"
  fi

  echo ${ARGS} ${CONTAINERS}
}

build() {
    echo -e "\nBuilding the permitify s2i base image ..."
    docker build \
        -t 'permitify-s2i' \
        -f 'permitify-s2i/Dockerfile' \
        ..

    echo -e "\nBuilding the permitify run-time image ..."
    ${S2I_EXE} build \
      -e "HTTP_PROXY=${HTTP_PROXY}" \
      -e "HTTPS_PROXY=${HTTPS_PROXY}" \
      '../src' \
      'permitify-s2i' \
      'permitify'
}

rebuild() {
    echo -e "\nRebuilding the permitify s2i base image ..."
    docker build \
        --no-cache \
        -t 'permitify-s2i' \
        -f 'permitify-s2i/Dockerfile' \
        ..

    echo -e "\nRebuilding the permitify run-time image ..."
    ${S2I_EXE} build \
      -e "HTTP_PROXY=${HTTP_PROXY}" \
      -e "HTTPS_PROXY=${HTTPS_PROXY}" \
      '../src' \
      'permitify-s2i' \
      'permitify'
}

deleteVolumes() {
  _projectName=${COMPOSE_PROJECT_NAME:-docker}

  echo "Stopping and removing any running containers ..."
  docker-compose rm -svf >/dev/null

  _pattern="^${_projectName}_\|^docker_"
  _volumes=$(docker volume ls -q | grep ${_pattern})

  if [ ! -z "${_volumes}" ]; then
    echo "Removing project volumes ..."
    echo ${_volumes} |  xargs docker volume rm
  else
    echo "No project volumes exist."
  fi
}

registerDids() {
  _seeds=${@}
  if [ -z "${_seeds}" ]; then
    echo -e \\n"registerDids; Missing parameter!"\\n
    exit 1
  fi

  for _seed in ${_seeds}; do
    registerDid ${_seed}
  done
}

registerDid() {
  _seed=${1}
  if [ -z "${_seed}" ]; then
    echo -e \\n"registerDid; Missing parameter!"\\n
    exit 1
  fi
  _seedJson=$(getSeedJson ${_seed})
  _ledgerUri=$(getLedgerRegistrationUrl)

  echo -e \\n"Registering ${_seed} with the ledger ..."
  curl -X POST \
    ${_ledgerUri} \
    -H 'content-type: application/json' \
    -d "${_seedJson}"
}

getSeedJson() {
  _seed=${1}
  if [ -z "${_seed}" ]; then
    echo -e \\n"getSeedJson; Missing parameter!"\\n
    exit 1
  fi

  echo "{\"seed\": \"${_seed}\"}"
}

generateSeeds() {
  _array=( $ALL_CONTAINERS )
  _endNumber=${#_array[@]}  
  unset _seeds
  for i in $(seq 1 $_endNumber); do
    _seeds="${_seeds} ${INDY_WALLET_SEED}${i}"
  done

  echo ${_seeds}
}

getLedgerRegistrationUrl() {
  if [[ ("${LEDGER_URL}" == "http://${DOCKERHOST}:9000") && ("${DOCKERHOST}" != "localhost") ]]; then
    _ledgerUrl="http://localhost:9000"  
  else
    _ledgerUrl="${LEDGER_URL}"
  fi

  echo "${_ledgerUrl}/register"
}

toLower() {
  echo $(echo ${@} | tr '[:upper:]' '[:lower:]')
}
# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
COMMAND=$(toLower ${1})
shift

case "${COMMAND}" in
  start)
      _startupParams=$(getStartupParams $@)
      configureEnvironment $@
      docker-compose up ${_startupParams}
    ;;
  stop)
      docker-compose stop
    ;;
  build)
      build
    ;;
  rebuild)
      rebuild
    ;;
  rm)
      # =========================================================
      # Suppress unnecessary messages
      # ---------------------------------------------------------
      export seed=fake_seed_0000000000000000000000
      export TOB_INDY_SEED=the_org_book_0000000000000000000
      configureEnvironment $@
      # =========================================================
      deleteVolumes
    ;;
  registerdids)
      # =========================================================
      # Suppress unnecessary messages
      # ---------------------------------------------------------
      export TOB_INDY_SEED=the_org_book_0000000000000000000
      configureEnvironment $@
      # =========================================================
      registerDids $(generateSeeds)
    ;;
  *)
      usage;;
esac

popd >/dev/null